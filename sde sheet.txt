//dutch national flag algo
simple method

class Solution {
public:
    void sortColors(vector<int>& nums) {
        #include <iterator>
       int count0=0,count1=0,count2=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0)count0++;
            if(nums[i]==1)count1++;
            if(nums[i]==2)count2++;
        }
        for(int i=0;i<count0;i++){
            nums[i]=0;
        }
        for(int i=count0;i<(count0+count1);i++){
            nums[i]=1;
        }
        for(int i=(count0+count1);i<nums.size();i++){
            nums[i]=2;
        }
    }
};

//dutch national flag algo

class Solution {
public:
    void sortColors(vector<int>& nums) {
    int l=0, h=nums.size()-1, mid=0;
        
        while(mid<=h)
        {
            switch(nums[mid])
            {
                case 0:
                    swap(nums[mid++],nums[l++]);
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(nums[mid], nums[h--]);
                    break;
            }
        }
    }
};

//repeat and missing number
int *findTwoElement(int *arr, int n) {
        
        int *p=new int[2];
        for(int i=0;i<n;i++)
        {
            if(arr[abs(arr[i])-1]>0)
            arr[abs(arr[i])-1]=-arr[abs(arr[i])-1];
            else
            p[0]=abs(arr[i]);
            
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>0)
            p[1]=i+1;
        }
        
        return p;
}



//merge sorted array without extra space
void merge(int arr1[], int arr2[], int n, int m)
{ 
    for(int i=0;i<n;i++)
    {
        if(arr1[i]>arr2[0])
        {
            int temp=arr1[i];
            arr1[i]=arr2[0];
            arr2[0]=temp;
            sort(arr2.begin(), arr2.end());
        }
    }
    
}

// Find the Duplicate Number
//method 1
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        map<int, int> m;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        
        for(auto k:m)
        {
            if(k.second>1)
                return k.first;
            
        }
        return 0;
    }
};

// Find the Duplicate Number
method 2, tortoise method

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
      int slow=nums[0];
        int fast=nums[0];
        do
        {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
            fast=nums[0];
        while(fast!=slow)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};

//maximum subarray sum//kadane's algo
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
     int sum=0;
        int max=nums[0];
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
             if(sum>max)
                max=sum;
            if(sum<0)
                sum=0;
           
        }
        return max;
        
    }
};

//merge overlapping subintervals
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
         vector<vector<int>> v;
        sort(intervals.begin(), intervals.end());
         vector<int> t{intervals[0][0], intervals[0][1]};
        for(int i=1;i<intervals.size();i++)
        {
            if(t[1]<intervals[i][0])
            {
                v.push_back(t);
                t=intervals[i];
            }
            else
            {
                t[1]=max(intervals[i][1],t[1]);
            }
        }
        v.push_back(t);
        
        return v;
        
        
    }
};


//pascal's triangle
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> r(numRows);
        for(int i=0;i<numRows;i++)
        {
             r[i].resize(i+1);
            r[i][0]=r[i][i]=1;
            for(int j=1;j<i;j++)
            {
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            }
        }
        return r;
        
    }
};


//best time to buy and sell stock
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int low=prices[0];
        int p=0;
        for(int i=0;i<prices.size();i++)
        {
            if(prices[i]<low)
                low=prices[i];
            else if(prices[i]-low>p)
                p=prices[i]-low;
        }
        return p;
        
    }
};

//rotate matrix
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        //transposing
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
                swap(matrix[i][j], matrix[j][i]);
        }
        //reversing each row
        for(int i=0;i<n;i++)
        {
            reverse(matrix[i].begin(), matrix[i].end());
        }
        
    }
};

//search in a 2d matrix
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int high=m*n-1;
        int low=0;
        
        
        
        
        while(low<=high)
        {
            int mid=low +(high-low)/2;
            if(matrix[mid/m][mid%m]==target)
                return true;
            else if(matrix[mid/m][mid%m]<target)
                    low=mid+1;
            else
                high=mid-1;
            
        }
        return false;
        
    }
};



//pow(x,n)//there is a error at leetcode
class Solution {
public:
    double myPow(double x, int n) {
      double ans=1.0;
        long long nn=n;
        if(nn<0)
            nn=-1*n;
        while(nn)
        {
            if(nn%2)
            {
                ans=ans*x;
                nn=nn-1;
            }
            else
            {
                x=x*x;
                nn=nn/2;
            }
        }
        
        if(n<0)
            ans = (double)(1.0)/(double)(ans);
        return ans;
    }
};


//two sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        vector<int> v;
    for (int i = 0; i < nums.size(); i++)
    {
        int temp = target - nums[i];
 
        if (m.find(temp) != m.end())
        {
            v.push_back(i);
            v.push_back(m[target-nums[i]]);
            return v;
        }
        else
        m[nums[i]]=i;
    }
        return v;
        
        
    }
};



//majority element n/2
method 1
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        map<long int, long int> m;
        for(int i=0;i<n;i++)
        {
            m[nums[i]]++;
        }
        for(auto j:m)
        {
            if(j.second>n/2)
                return j.first;
        }
        return 0;
    }
};
 //method 2:moore voting algo

class Solution {
public:
    int majorityElement(vector<int>& nums) {
    int count=0;
        int element=0;
        for(int i=0;i<nums.size();i++)
        {
            if(count==0)
                element=nums[i];
            if(nums[i]==element)
                count+=1;
            else
                count-=1;
        }
        return element;
    }
};

//majority element >n/3
method 1
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int >v;
        int n=nums.size();
        map<int, int> m;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        for(auto j:m)
        {
            if(j.second>n/3)
            {
                v.push_back(j.first);
            }
        }
        return v;
        
    }
};
method 2 moore voting element
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int >v;
        int n=nums.size();
        int num1=0, num2=1, c1=0, c2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==num1)c1++;
            else if(nums[i]==num2)c2++;
            else if(c1==0)
            {
                num1=nums[i];
                c1=1;
            }
            else if(c2==0)
            {
                num2=nums[i];
                c2=1;
            }
            else
            {
                c1--;
                c2--;
            }
        }
        c2=c1=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==num1)c1++;
            else if(nums[i]==num2)c2++;
        }
        if(c1>n/3)
            v.push_back(num1);
        if(c2>n/3)
            v.push_back(num2);
        return v;
        
    }
};



mergining sorted ll
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
     if (l1==NULL)
         return l2;
    if (l2==NULL)
         return l1;
        if(l1->val>l2->val)
        {
        ListNode *temp=l1;
        l1=l2;
        l2=temp;
    }
        ListNode *res=l1;
        while(l1!=NULL && l2!=NULL)
        {
            ListNode *temp=NULL;
            while(l1!=NULL && l1->val<=l2->val)
            {
                temp=l1;
                l1=l1->next;
            }
            temp->next=l2;
            
            ListNode *tmp=l1;
            l1=l2;
            l2=tmp;
        }
        
        return res;
    }
};


























implementation of stack using 2 queues
class QueueStack{
private:
    queue<int> q1;
    queue<int> q2;
public:
    void push(int);
    int pop();
};
 */

//Function to push an element into stack using two queues.
void QueueStack :: push(int x)
{
         q2.push(x);
  
        // Push all the remaining
        // elements in q1 to q2.
        while (!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }
  
        // swap the names of two queues
        queue<int> q = q1;
        q1 = q2;
        q2 = q;
}

//Function to pop an element from stack using two queues. 
int QueueStack :: pop()
{
    if(q1.empty())
    return -1;
        int x=q1.front();
        q1.pop();
        return x;
}


subset sums


vector<int>v;
        long long total=1<<N;
        for(int i=0;i<total;i++)
        {
            int sum=0;
            for(int j=0;j<N;j++)
            {
                if(i&(1<<j))
                sum+=arr[j];
            }
            v.push_back(sum);
        }
        return v;

bool isPowerofTwo(long long n){
        int count=0;
        //counting no of set bits, power of two has no of set bits as 1
        while(n)
        {
            count+=n&1;
            n>>=1;
        }
        if(count==1)
        return true;
        else 
        return false;
        
    }

///queue using stacks


void StackQueue :: push(int x)
{
     while(!s1.empty())
    {
        s2.push(s1.top());
        s1.pop();
    }
    s1.push(x);
    while(!s2.empty())
    {
        s1.push(s2.top());
        s2.pop();
    }
    
}



int StackQueue :: pop()
{
        if(s1.empty())
    return -1;
    
    int x=s1.top();
    s1.pop();
    return x ;     
}

///queue using stacks amortized method

void StackQueue :: push(int x)
{
     
        s1.push(x);
    
}


//Function to pop an element from queue by using 2 stacks.
int StackQueue :: pop()
{
    if(s1.empty() && s2.empty()) // doubt
    return -1;
    if(s2.empty())
    {
        while(!s1.empty())
        {
            s2.push(s1.top());
            s1.pop();
        }
    }
    int x=s2.top();
    s2.pop();
    return x;
}

//counting bits

class Solution {
public:
    int countsetbits(int n)
    {
        int count=0;
        while(n!=0)
        {
            count+=n & 1;
            n>>=1;
        }
        return count;
    }
    vector<int> countBits(int n) {
        vector<int> v;
     
        for(int i=0;i<=n;i++)
        {
            int k=0;
            k=countsetbits(i);
               v.push_back(k);
        }
        return v;
    }

//////implement atoi
class Solution{
  public:
    
    int atoi(string str) {
    int res=0;
    int sign=1;
    int i=0;
    if(str[i]=='-')
    {
        sign=-1;
        i++;
    }
    for(;i<str.size();i++)
    {
        if(str[i]>'9' || str[i]<'0')
        return -1;
        
        res=res*10+str[i]-'0';
    }
    return sign*res;
    }
};


///is anagram
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size())
            return false;
        map<int, int> m;
        for(int i=0;i<s.size();i++)
        {
            m[s[i]]++;
        }
        for(int j=0;j<t.size();j++)
        {
            m[t[j]]--;
        }
        for(auto k:m)
        {
            if(k.second>0)
            {
                return false;
            break;
            }
            
        }
        return true;

//merge overlapping intervals

 vector<vector<int>> v;
        sort(intervals.begin(), intervals.end());
         vector<int> t{intervals[0][0], intervals[0][1]};
        for(int i=1;i<intervals.size();i++)
        {
            if(t[1]<intervals[i][0])
            {
                v.push_back(t);
                t=intervals[i];
            }
            else
            {
                t[1]=max(intervals[i][1],t[1]);
            }
        }
        v.push_back(t);
        
        return v;


//pascals triangle
 vector<vector<int>> generate(int numRows) {
        vector<vector<int>> r(numRows);
        for(int i=0;i<numRows;i++)
        {
             r[i].resize(i+1);
            r[i][0]=r[i][i]=1;
            for(int j=1;j<i;j++)
            {
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            }
        }
        return r;
        
    }


//print nth row of pascals triangle
vector<int> getRow(int rowIndex) {
        vector<int> v;
        int n= rowIndex;
        long long int prev=1;
        long long int current;
        v.push_back(prev);
        for(int i=1;i<=n;i++)
        {
            
             current=(prev*(n-i+1))/i;
             v.push_back(current);
             prev=current;
            
            
        }
        return v;

//search in a 2d matrix
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int low=0;
        int high=(m*n)-1;
       while(low<=high)
       {
           int mid=low+(high-low)/2;
           
           if(matrix[mid/m][mid%m]==target)
               return true;
           else if(matrix[mid/m][mid%m]<target)
                    low=mid+1;
           else
               high=mid-1;
              
       }
        return false;


//pow(x,n)
 double myPow(double x, int n) {
        if(x==0)
            return 0;
        if(x==1)
            return 1;
      
        else if(n<0)
        {
             double res=1;
            long long int k=-(n);
            for(long long int i=0;i<k;i++)
            {
                res=res/x;
            }
            return res;
        }
        else
        {
            double result=1;
            for(int i=0;i<n;i++)
            {
                result=result*x;
            }
            return result;
        }

//pow(x,n) log2N tC
double myPow(double x, int n) {
       long long nn=n;
        double ans=1.0;
        if(n<0)
            nn=-1*nn;
        while(nn)
        {
            if(nn%2)
            {
                ans=ans*x;
                nn=nn-1;
            }
            else
            {
                x=x*x;
                nn=nn/2;
            }
        }
        if(n<0)
            return 1/ans;
        else
            return ans;

//valid parenthesis

bool isValid(string s) {
        stack<char> st;
        for(int i=0;i<s.size();i++)
        {
            if (s[i] == '(' || s[i] == '['
            || s[i] == '{')
        {
            st.push(s[i]);
            continue;
        }
            if(st.empty())
                return false;
            
            if(s[i]!='}' && st.top()=='{')
            return false;
            if(s[i]!=')' && st.top()=='(')
            return false;
            if(s[i]!=']' && st.top()=='[')
            return false;
            else
                st.pop();
        }
        if(st.empty())
            return true;
        else
            return false;
}

//find msb in O(1);
int findMSB(int n){
   
     
          n|=n>>1;
         n|=n>>2;
     n|=n>>4;
          n|=n>>8;
          n|=n>>16;
    n=n+1;
    
    return n>>1;
}


square of a number without using * / and pow()

int square(int n)
{
	if(n==0)
	return 0;
	if(n<0)
	n=-n;
	
	int x=n>>1;
	
	if(n & 1)//if no is odd
	return (square(x)<<2) + x<<1 + 1;
	  
	else
	return (square(x)<<2);

}        


// count and say
string countAndSay(int n) {
       if (n == 1)      
           return "1";
    if (n == 2)      
        return "11";
        
        string str="11";
        
        for(int i=3;i<=n;i++)
        {
            
            str+="$";
             int len=str.size();
            int count=1;
           
           
             string temp="";
            for(int j=1;j<len;j++)
            {
                if(str[j]!=str[j-1])
                {
                    temp+=count+'0';
                    temp+=str[j-1];
                    count=1;
                }
                else
                    count++;
            }
          str=temp;
        }
 
   return str;
    }

//2 sum
vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        vector<int> v;
    for (int i = 0; i < nums.size(); i++)
    {
        int temp = target - nums[i];
 
        if (m.find(temp) != m.end())
        {
            v.push_back(i);
            v.push_back(m[target-nums[i]]);
            return v;
        }
        else
        m[nums[i]]=i;
    }
        return v;
        }

//longest consecutive sequence

int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
       int ans = 0, count = 0;
        sort(nums.begin(), nums.end());
        vector<int > v;
        v.push_back(nums[0]);
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]!=nums[i-1])
                v.push_back(nums[i]);
        }
        for(int i=0;i<v.size();i++)
        {
            if(i>0 && v[i-1]+1==v[i])
            {
                count++;
            }
            else
            {
                count=1;
            }   
                ans=max(ans, count);
        }
        return ans;
        
        
    } 

// largest subarray with 0 sum
int maxLen(int A[], int n)
{
    unordered_map<int, int> m;
    int len=0;
    int sum=0;
    for(int i=0;i<n;i++)
    {
        sum+=A[i];
        if(sum==0)
        {
            len=i+1;
        }
        
        if(m.find(sum)!=m.end())
        {
            len=max(len, i-m[sum]);
        }
        else
        m[sum]=i;
        
    }
    return len;
}


//3 sum
 vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        int i;
       
        
        
        for(int i=0;i<n-2;i++)
        {
            if(i==0 ||(i>0 && nums[i]!=nums[i-1]))
            {
            int b=-1*nums[i];
             int l=i+1;
            int h=n-1;
            while(l<h)
            {
                if(nums[l]+nums[h]==b)
                {
                    
                    vector<int >temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[l]);
                    temp.push_back(nums[h]);
                    res.push_back(temp);
                    while(l<h && nums[l]==nums[l+1])l++;
                    while(l<h && nums[h]==nums[h-1])h--;
                    h--;
                    l++;
                
                }
                else if(nums[l]+nums[h]>b)
                    h--;
                else
                    l++;
            }
            }
        
        }
        
        
        return res;
        
    }
};

//maximum consecutive ones
int findMaxConsecutiveOnes(vector<int>& nums) {
        if(nums.size()==1 && nums[0]==1)
            return 1;
        if(nums.size()==0)
            return 0;
        int ans=0;
        int count=0;
        
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==1)
            {
                count++;
                ans=max(ans, count);
            }
            else 
                count=0;
            
        }
        return ans;
        
    }

//remove duplicates
 int removeDuplicates(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        int j=0;
       for(int i=0;i<nums.size()-1;i++)
       {
           if(nums[i]!=nums[i+1])
           {
               nums[j]=nums[i];
               j++;
           }
           
       }
        nums[j]=nums[nums.size()-1];
        return j+1;
//trapping rainwater

class Solution {
public:
    int trap(vector<int>& height) {
        int res = 0;
        int n=height.size();
        int *pre=new int[n];
         int *suff=new int[n];
        int max1=height[0];
        for(int i=0;i<n;i++)
        {
            
            max1=max(height[i], max1);
                pre[i]=max1;
        }
        int max2=height[n-1];
        for(int i=n-1;i>=0;i--)
        {
            
            max2=max(height[i], max2);
                suff[i]=max2;
        }
        for(int i=0;i<n;i++)
        {
            res=res+(min(pre[i], suff[i])-height[i]);
        }
        return res;
        
    }
};
//compare version numbers

 int compareVersion(string version1, string version2) {
        int i1=0,i2=0, n1=version1.size(), n2=version2.size();
        
            while(i1<n1 || i2<n2)
            {
                int v1=0,v2=0;
                
                while(i1<n1 && version1[i1]!='.')
                {
                    v1=10*v1+version1[i1]-'0';
                    i1++;
                }
                 while(i2<n2 && version2[i2]!='.')
                {
                    v2=10*v2+version2[i2]-'0';
                    i2++;
                }
                if(v1>v2)
                    return 1;
                else if(v1<v2)
                    return -1;
                else
                    i1++;
                i2++;
            }
        return 0;
    }
};


// minimum in a rotated sorted array
 int findMin(vector<int>& nums) {
        int l=0;
        int n=nums.size();
        int h=n-1;
        if(nums[l]<nums[h] || nums.size()==1)
            return nums[l];
        while(l<=h)
        {
           
            int mid=l+(h-l)/2;
            if(nums[l]>nums[h])
            {
                if(nums[l]>nums[mid])
                    h=mid;
                else
                    l=mid+1;
            }
            else
                return nums[l];
                
                
        }
        return nums[l];
}

floor of an element in sorted array\

 int l = 0;
    int h = N-1;
    
    while(l<=h){
        
        int mid = l + (h-l)/2;
        
        if(arr[mid] == K)
            return mid;
        else if(arr[mid] < K)
            l = mid+1;
        else
            h = mid-1;
        
    }
    
    return h;


Find Smallest Letter Greater Than Target

char nextGreatestLetter(vector<char>& letters, char target) {
        char res;
        int n =letters.size()-1;
        int low=0;
        if(target==letters[n] || target>letters[n])
            return letters[0];
        int high=letters.size()-1;
        
        while(low<=high)
        {
            int mid=low +(high-low)/2;
            if(letters[mid]==target)
                low=mid+1;
            else if(letters[mid]>target)
            {
                res=letters[mid];
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return res;
    }
};

//peak element
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l=0;
        int h=nums.size()-1;
        int n=nums.size()-1;
        if(nums.size()==1)
            return 0;
        while(l<=h)
        {
            int mid=l + (h-l)/2;
            if(mid>0 && mid<nums.size()-1)
            {
                if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1])
                    return mid;
                else if(nums[mid+1]>nums[mid])
                    l=mid+1;
                else if(nums[mid-1]>nums[mid])
                    h=mid-1;
            }
            else if(mid==0)
            {
                if(nums[0]>nums[1])
                    return 0;
                else
                    return 1;
            }
            else
            {
                if(nums[n]>nums[n-1])
                    return n;
                else
                    return n-1;
            }
        }
        return 0;
        
    }
};

//search in row wise and column wise sorted matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int i=0;
        int j=n-1;
        
        
        while( j>=0 && i<m && i>=0 && j<n )
        {
            if(matrix[i][j]==target)
                return true;
            else if(matrix[i][j]<target)
                i++;
            else if(matrix[i][j]>target)
                j--;
        }
        return false;
        
    }
};

//min absolute difference
class Solution {
public:
    vector<vector<int>> minimumAbsDifference(vector<int>& arr) {
        int diff=INT_MAX;
          vector<vector<int>> v1;
        
        sort(arr.begin(), arr.end());
        for(int i=0;i<arr.size()-1;i++)
        {
            
            diff=min(arr[i+1]-arr[i], diff);
                   
               
               
        }
        for(int i=0;i<arr.size()-1;i++)
        {
            if(arr[i+1]-arr[i]==diff)
               {
                   
                   v1.push_back({arr[i], arr[i+1]});
               }
               
             
               
               
        }
               return v1;
        
    }
};

//single element in a sorted array///nice question
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        if(nums.size()==1)
            return nums[0];
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==nums[mid^1])
            
                low=mid+1;
            
            else
                high=mid-1;
        }
        return nums[low];
        
    }
};

//search an element in a rotated sorted list
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0;
        int h=nums.size()-1;
        
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=nums[l])
            {
                if(target <nums[mid] && target >=nums[l])
                    h=mid-1;
                    else
                        l=mid+1;
            }
            else if(nums[h]>=nums[mid])
            {
                if(target>nums[mid] && target<=nums[h])
                    l=mid+1;
                else
                    h=mid-1;
            }
        }
        return -1;
        
        
        
    }
};
//kth element od two sorted array//gfg

stack using queues leetcode

class MyStack {
public:
    queue<int> q1;
    queue<int> q2;
    MyStack() {
        
        
    }
    
    void push(int x) {
        
        
        q2.push(x);
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
            
        }
        queue<int >q=q1;
        q1=q2;
        q2=q;
        
    }
    
    int pop() {
         
       int x=q1.front();
        q1.pop();
        
        return x;
        
    }
    
    int top() {
        int x=q1.front();
        return x;
        
        
    }
    
    bool empty() {
        if(q1.empty())
            return true;
            else 
        return false;
    }
};

//largest subarray with 0 sum

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        unordered_map<int, int> presum;
 
    int sum = 0; // Initialize the sum of elements
    int max_len = 0; // Initialize result
 
    // Traverse through the given array
    for (int i = 0; i < n; i++) {
        // Add current element to sum
        sum += A[i];
 
        if (A[i] == 0 && max_len == 0)
            max_len = 1;
        if (sum == 0)
            max_len = i + 1;
 
        // Look for this sum in Hash table
        if (presum.find(sum) != presum.end()) {
            // If this sum is seen before, then update max_len
            max_len = max(max_len, i - presum[sum]);
        }
        else {
            // Else insert this sum with index in hash table
            presum[sum] = i;
        }
    }
 
    return max_len;
}
    
};


remove duplicates
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        int i=0;
       for(int j=1;j<nums.size();j++)
       {
           if(nums[i]!=nums[j])
           {
               i++;
               nums[i]=nums[j];
               
           }
           
       }
        
        return i+1;
    }
};